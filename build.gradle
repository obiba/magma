apply plugin: 'idea'
apply plugin: 'versions'
apply plugin: 'sonar-runner'
apply from: 'libraries.gradle'

task wrapper(type: Wrapper) {
  gradleVersion = '1.11'
}

buildscript {
  repositories {
    maven { url 'http://repo.obiba.org/obiba-gradle-plugins-release' }
  }
  dependencies {
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:latest.release'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-1'
    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:latest.release'
  }
}

allprojects {

  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: 'artifactory-publish'
  apply plugin: 'errorprone'
  apply plugin: "jacoco"

  group = 'org.obiba.magma'

  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7

  defaultTasks 'build'

  buildDir = 'target'

  repositories {
    maven { url 'http://repo.obiba.org/repo' }
    mavenCentral()
    mavenLocal()
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  configurations {
    pmd
    compile
    runtime
    all*.exclude group: 'commons-logging'
  }

  jar {
    manifest {
      attributes 'Implementation-Title': project.name,
          'Implementation-Version': project.version,
          'Implementation-Vendor-Id': project.group,
          'Implementation-Vendor': 'OBiBa'
    }
  }

  // support incremental build for test task and artifactoryPublish
  // see http://www.practicalgradle.org/blog/2011/06/incremental-tests-with-jenkins/
  task jenkinsTest {
    inputs.files test.outputs.files
    doLast {
      def timestamp = System.currentTimeMillis()
      if (test.testResultsDir.exists()) {
        test.testResultsDir.eachFile { it.lastModified = timestamp }
      }
      if (test.testReportDir.exists()) {
        test.testReportDir.eachFile { it.lastModified = timestamp }
      }
    }
  }
  build.dependsOn(jenkinsTest)
  artifactoryPublish.dependsOn(jenkinsTest)

  // create jar with sources
  task packageSources(type: Jar, dependsOn: compileJava) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  // create jar with javadoc
  task packageJavadoc(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives packageSources
    archives packageJavadoc
  }

  // configure publication tu upload binary, POM.xml, sources & javadoc
  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        pom.withXml {
          def Node root = asNode();
          root.appendNode('name', 'Magma')
          root.appendNode('description', 'Data and meta-data abstraction layer')
          root.appendNode('url', 'http://www.obiba.org')

          def org = root.appendNode('organization')
          org.appendNode('name', 'OBiBa')
          org.appendNode('url', 'http://www.obiba.org')

          def issues = root.appendNode('issueManagement')
          issues.appendNode('system', 'jira')
          issues.appendNode('url', 'http://jira.obiba.org/jira/browse/MAGMA')

          def scm = root.appendNode('scm')
          scm.appendNode('url', 'https://github.com/obiba/magma')
          scm.appendNode('connection', 'scm:git:git://github.com/obiba/magma.git')
          scm.appendNode('developerConnection', 'scm:git:git://github.com/obiba/magma.git')

          def license = root.appendNode('licenses').appendNode('license');
          license.appendNode('name', 'GNU Public License version 3')
          license.appendNode('url', 'http://www.obiba.org/node/62')
          license.appendNode('distribution', 'repo')
        }
        artifact packageSources {
          classifier "sources"
        }
        artifact packageJavadoc {
          classifier "javadoc"
        }
      }
    }
  }

  // configure artifactory plugin
  artifactory {
    contextUrl = 'http://repo.obiba.org'
    publish {
      repository {
        // these settings are overridden by Artifactory Jenkins plugin
        repoKey = 'libs-snapshot-local'
        username = 'user'
        password = 'password'
      }
      defaults {
        publications('mavenJava')
      }
    }
    resolve {
      contextUrl = 'http://repo.obiba.org'
      repository {
        repoKey = 'libs-releases'
      }
    }
  }

  sonarRunner {
    sonarProperties {
      property 'sonar.sourceEncoding', 'UTF-8'
    }
  }

}

subprojects { subProject ->

  dependencies {
    compile(libraries.findbugs_annotation)
    compile(libraries.guava)
    compile(libraries.slf4j_api)
    compile(libraries.jsr305)
    compile(libraries.validation)

    testCompile project(':magma-test')
    testCompile(libraries.catch_exception)
    testCompile(libraries.easymock)
    testCompile(libraries.fest)
    testCompile(libraries.jcl_slf4j)
    testCompile(libraries.junit)
    testCompile(libraries.logback_classic)
    testCompile(libraries.janino)
    testCompile(libraries.mockito)

    pmd 'net.sourceforge.pmd:pmd:5.0.5'
  }

  test {
    testLogging.showStandardStreams = true
  }

  // Reporting
  apply plugin: 'project-report'
  reporting {
    baseDir "$buildDir/reports"
  }

  // FindBugs
  apply plugin: 'findbugs'
  findbugs {
    reportsDir = file("${reporting.baseDir}/findbugs-output")
    excludeFilter = file(rootProject.file('src/main/resources/findbugs-exclude.xml'))
    ignoreFailures = true
  }

  // PMD
  task pmd << {
    if (!file('src').exists()) return;
    file("${reporting.baseDir}").mkdirs()
    ant {
      taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmd.asPath)
      pmd(shortFilenames: 'true', failonruleviolation: 'false', rulesetfiles: rootProject.file('src/main/resources/pmd-ruleset.xml').toURI().toString()) {
        formatter(type: 'html', toFile: "${reporting.baseDir}/pmd.html")
        formatter(type: 'xml', toFile: "${reporting.baseDir}/pmd.xml")
        fileset(dir: 'src') {
          include(name: '**/*.java')
        }
      }
    }
  }

}
